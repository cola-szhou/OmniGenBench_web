{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>                 OmniGenBench             </p> <p>             A modular benchmarking platform for evaluating genomic foundation models (gFMs) across diverse tasks like RNA structure prediction, gene function classification, and multi-species generalization.             </p> Quick Start  Learn More <p>SCROLL DOWN</p> <p>Everything you would expect</p> Benchmark effortlessly <p>Run automated and reproducible evaluations for genomic foundation models</p> Understand your models <p>Explore interpretability across diverse tasks and species</p> Run tutorials instantly <p>Use click-to-run guides for genomic sequence modeling</p> Train and infer efficiently  <p>Accelerated workflows for training and inference on GFMs</p> \ud83d\udcdd Features  <p>A brief description of the features of the project.</p> \ud83d\udcdd Features <p>A brief description of the features of the project.</p> 30+ Genomic Foundation Models Supported <p>OmniGenBench provides comprehensive support for over 30 state-of-the-art genomic foundation models, including DNABERT, Nucleotide Transformer, DNAGPT, and many more. Our platform enables seamless evaluation across diverse model architectures and training approaches.</p> <p>From transformer-based models to graph neural networks, OmniGenBench supports models designed for DNA sequence analysis, RNA structure prediction, protein function prediction, and multi-species genomic understanding. Each model is carefully integrated with standardized evaluation protocols.</p> \u2192 Learn more 5 Curated Benchmarks Supported <p>OmniGenBench features five carefully curated benchmarks covering the most important genomic tasks: DNA sequence classification, RNA structure prediction, protein function annotation, regulatory element identification, and cross-species sequence analysis.</p> <p>Each benchmark includes standardized datasets, evaluation metrics, and baseline results, ensuring fair and reproducible comparisons across different genomic foundation models. Our benchmarks are designed to test both general genomic understanding and task-specific capabilities.</p> \u2192 Learn more Rich Explanation Methods <p>OmniGenBench provides comprehensive interpretability tools including attention visualization, saliency mapping, feature attribution, and sequence motif discovery. These methods help researchers understand how genomic foundation models make predictions and identify important biological patterns.</p> <p>Our explanation framework supports multiple visualization techniques, from heatmaps showing attention patterns to interactive sequence browsers that highlight key genomic regions. This enables deeper insights into model behavior and biological relevance of predictions.</p> \u2192 Learn more Faster Training with LoRA <p>OmniGenBench integrates Low-Rank Adaptation (LoRA) techniques to enable efficient fine-tuning of large genomic foundation models. This approach reduces computational requirements by up to 90% while maintaining model performance, making genomic AI accessible to more researchers.</p> <p>Our LoRA implementation supports various adaptation strategies, from task-specific fine-tuning to multi-task learning. This enables rapid experimentation and deployment of genomic models across different biological applications without the need for full model retraining.</p> \u2192 Learn more Meet the Team <p>The minds behind OmniGenBench</p>            Ke Li Project Lead            Bob Lee Lead Engineer            Carol Smith Data Scientist            Carol Smith Data Scientist            Carol Smith Data Scientist Our Partners"},{"location":"content/api/overview/","title":"API","text":"<p>TODO: Add API reference here.</p>"},{"location":"content/getting-started/basic-introduction/","title":"Basic Introduction","text":"<p>Welcome to the OmniGenBench documentation!</p>"},{"location":"content/getting-started/basic-introduction/#what-is-omnigenbench","title":"What is OmniGenBench?","text":"<p><code>OmniGenBench</code> is a modular, extensible benchmarking platform designed to evaluate genomic foundation models (GFMs) across a wide range of genomics tasks. Whether you are working on RNA structure prediction, gene function classification, or multi-species generalization, <code>OmniGenBench</code> provides a unified and reproducible framework for assessing model performance.</p>"},{"location":"content/getting-started/basic-introduction/#who-is-omnigenbench-for","title":"Who is OmniGenBench for?","text":"<ul> <li>Researchers developing or evaluating genomic models</li> <li>Bioinformaticians seeking standardized benchmarks</li> <li>Data scientists interested in large-scale genomics tasks</li> </ul>"},{"location":"content/getting-started/basic-introduction/#key-features","title":"Key Features","text":"<ul> <li>Modular Benchmarks: Easily plug in new tasks or datasets.</li> <li>Automatic Dataset Management: Datasets are downloaded and managed automatically.</li> <li>Reproducible Results: Built-in support for random seeds and result tracking.</li> <li>Flexible Model Integration: Benchmark any model compatible with the Hugging Face ecosystem.</li> <li>Comprehensive Reporting: Generate detailed performance reports and visualizations.</li> </ul>"},{"location":"content/getting-started/basic-introduction/#where-should-i-start","title":"Where should I start?","text":"<ul> <li>Visit the Getting Started Guide for a hands-on example.</li> <li>Check out the API Reference for detailed usage.</li> <li>Explore our Tutorials for advanced workflows.</li> </ul>"},{"location":"content/getting-started/command-line-usage/","title":"Command-Line Usage","text":"<p>OmniGenBench provides a command-line interface (CLI) for running tasks and benchmarks. You can run OmniGenBench in one line!</p> <pre><code>autobench --model_name_or_path \"yangheng/OmniGenome-186M\" --benchmark \"RGB\" --trainer accelerate\n</code></pre> <p></p> <p>This command sets the model to <code>yangheng/OmniGenome-186M</code>, the benchmark to <code>RGB</code>, and use <code>accelerate</code> as the trainer. All acceptable parameters are listed below.</p> Parameter Name Description Default Value <code>--model_name_or_path</code> The name or path of the model to use. <code>yangheng/OmniGenome-186M</code> <code>--benchmark</code> The benchmark to use. <code>RGB</code> <code>--trainer</code> The trainer to use. <code>accelerate</code> <p>Tip</p> <p>OmniGenBench provides plug-and-play evaluation for over 30 genomic foundation models, and supports 5 curated benchmarks.</p>"},{"location":"content/getting-started/installation/","title":"Installation","text":"<p>We provide two installation methods: PyPI and Source Installation.</p>"},{"location":"content/getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.10+</li> <li>PyTorch 2.5+</li> <li>Transformers 4.46.0+</li> </ul>"},{"location":"content/getting-started/installation/#installation_1","title":"Installation","text":""},{"location":"content/getting-started/installation/#installation-with-pypi","title":"Installation with PyPI","text":"<pre><code>pip install omnigenome -U\n</code></pre>"},{"location":"content/getting-started/installation/#installation-from-source","title":"Installation from Source","text":"<p>For majority of OmniGenBench users, installing from a pre-built package is recommended. However, if you want to install from source, you can do so by following the steps below.</p> <pre><code>git clone https://github.com/COLA-Laboratory/OmniGenBench.git\ncd OmniGenBench\npip install -e .\n</code></pre>"},{"location":"content/getting-started/installation/#contributing","title":"Contributing","text":"<p>If you are interested in contributing to OmniGenBench, please refer to the Contributing Guide for details.</p> <pre><code>git clone https://github.com/COLA-Laboratory/OmniGenBench.git\n</code></pre>"},{"location":"content/getting-started/installation/#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"content/getting-started/installation/#acknowledgements","title":"Acknowledgements","text":"<p>We would like to thank the following projects for their contributions to this project:</p> <ul> <li>Hugging Face</li> <li>PyTorch</li> <li>Transformers</li> </ul>"},{"location":"content/getting-started/python-api-usage/","title":"Python API Usage","text":"<p>You can easily run the auto-benchmark in Python using the <code>omnigenome</code> package. Below is a step-by-step example:</p> <pre><code># Import the AutoBench class from the omnigenome package\nfrom omnigenome import AutoBench\n\n# Specify the model checkpoint from Hugging Face Model Hub\ngfm = 'LongSafari/hyenadna-medium-160k-seqlen-hf'\n\n# Choose a benchmark. Options: \"RGB\", \"GB\", \"PGB\", \"GUE\"\n# The benchmark dataset will be automatically downloaded if not present.\nbenchmark = \"RGB\"\n\n# Set the batch size for evaluation\nbench_size = 8\n\n# Define the random seeds for reproducibility\nseeds = [0, 1, 2, 3, 4]\n\n# Initialize the AutoBench object\n# Set overwrite=True if you want to overwrite existing results\nbench = AutoBench(\n    benchmark=benchmark,\n    model_name_or_path=gfm,\n    overwrite=False\n)\n\n# Run the benchmark\n# autocast: Set to True to enable mixed precision (faster on supported hardware)\n# batch_size: Number of samples per batch\n# seeds: List of random seeds for multiple runs\nbench.run(\n    autocast=False,\n    batch_size=bench_size,\n    seeds=seeds\n)\n</code></pre> <p>Note</p> <ul> <li>Make sure you have installed the <code>omnigenome</code> package and its dependencies.</li> <li>The benchmark datasets will be downloaded automatically from <code>Hugging Face</code> if not already present.</li> <li>For more advanced usage and troubleshooting, see the AutoBench Tutorial Notebook.</li> </ul>"},{"location":"content/getting-started/supported-benchmarks/","title":"Supported Benchmarks","text":"<p>OmniGenBench supports five curated benchmark suites covering both sequence-level and structure-level genomics tasks across species.</p> Suite Focus #Tasks / Datasets Sample Tasks RGB RNA structure + function 12 tasks (SN-level) RNA secondary structure, SNMR, degradation prediction BEACON RNA (multi-domain) 13 tasks Base pairing, mRNA design, RNA contact maps PGB Plant long-range DNA 7 categories PolyA, enhancer, chromatin access, splice site GUE DNA general tasks 36 datasets (9 tasks) TF binding, core promoter, enhancer detection GB Classic DNA classification 9 datasets Human/mouse enhancer, promoter variant classification"},{"location":"content/getting-started/supported-models/","title":"Supported Models","text":"<p>OmniGenBench provides plug-and-play evaluation for over 30 genomic foundation models, covering both RNA and DNA modalities. The following are highlights:</p> Model Params Pre-training Corpus Highlights OmniGenome 186M 54B plant RNA+DNA tokens Multi-modal, structure-aware encoder Agro-NT-1B 985M 48 edible-plant genomes Billion-scale DNA LM w/ NT-V2 k-mer vocab RiNALMo 651M 36M ncRNA sequences Largest public RNA LM; FlashAttention-2 DNABERT-2 117M 32B DNA tokens, 136 species (BPE) Byte-pair encoding; 2nd-gen DNA BERT RNA-FM 96M 23M ncRNA sequences High performance on RNA structure tasks RNA-MSM 96M Multi-sequence alignments MSA-based evolutionary RNA LM NT-V2 96M 300B DNA tokens (850 species) Hybrid k-mer vocabulary HyenaDNA 47M Human chromosomes Long-context autoregressive model (1Mb) SpliceBERT 19M 2M pre-mRNA sequences Fine-grained splice-site recognition Caduceus 1.9M Human chromosomes Ultra-compact DNA LM (RC-equivariant) RNA-BERT 0.5M 4,000+ ncRNA families Small BERT with nucleotide masking ...and more \u2014 See Appendix E of the paper Includes PlantRNA-FM, UTR-LM, MP-RNA, CALM, etc."},{"location":"content/tutorial/RNA-embedding/","title":"RNA Embedding","text":""},{"location":"content/tutorial/RNA-embedding/#rna-embedding-model","title":"RNA Embedding Model","text":"<p>This tutorial will guide you through how to use the RNA embedding model using the <code>OmniGenomeModelForEmbedding</code> class. We will cover initializing the model, encoding RNA sequences, saving/loading embeddings, and computing similarities.</p>"},{"location":"content/tutorial/RNA-embedding/#install-required-dependencies","title":"Install Required Dependencies","text":"<p>Before we start, make sure you have the necessary libraries installed. You can install them using the following command:</p> <pre><code>!pip install OmniGenome torch transformers autocuda\n</code></pre>"},{"location":"content/tutorial/RNA-embedding/#setting-up-the-embedding-model","title":"Setting Up the Embedding Model","text":"<p>First, let's initialize the OmniGenomeModelForEmbedding class with a pre-trained model.</p> <pre><code>from omnigenome import OmniGenomeModelForEmbedding\n\n# Initialize the model using a pre-trained model path (replace with RNA-specific model if available)\nmodel_name = \"bert-base-uncased\"  # Example model, replace with your own model\nembedding_model = OmniGenomeModelForEmbedding(model_name)\n</code></pre>"},{"location":"content/tutorial/RNA-embedding/#encoding-rna-sequences-into-embeddings","title":"Encoding RNA Sequences into Embeddings","text":"<p>We'll now encode a batch of RNA sequences into embeddings.</p> <pre><code># Example RNA sequences (replace these with your own RNA sequences)\nrna_sequences = [\n    \"AUGGCUACG\",\n    \"CGGAUACGGC\",\n    \"UGGCCAAGUC\",\n    \"AUGCUGCUAUGCUA\"\n]\n\n# Encode the RNA sequences into embeddings\nrna_embeddings = embedding_model.batch_encode(rna_sequences)\n\n# Display the generated embeddings\nprint(\"RNA Embeddings:\")\nprint(rna_embeddings)\n</code></pre>"},{"location":"content/tutorial/RNA-embedding/#saving-and-loading-embeddings","title":"Saving and Loading Embeddings","text":"<p>You can save the generated embeddings to a file and load them later when needed.</p> <pre><code># Save embeddings to a file\nembedding_model.save_embeddings(rna_embeddings, \"rna_embeddings.pt\")\n\n# Load the embeddings from the file\nloaded_embeddings = embedding_model.load_embeddings(\"rna_embeddings.pt\")\n\n# Display the loaded embeddings to verify\nprint(\"Loaded RNA Embeddings:\")\nprint(loaded_embeddings)\n</code></pre>"},{"location":"content/tutorial/RNA-embedding/#computing-similarity-between-rna-sequences","title":"Computing Similarity Between RNA Sequences","text":"<p>Let's compute the similarity between two RNA sequence embeddings using cosine similarity.</p> <pre><code># Compute the similarity between the first two RNA sequence embeddings\nsimilarity = embedding_model.compute_similarity(loaded_embeddings[0], loaded_embeddings[1])\n\n# Display the similarity score\nprint(f\"Similarity between the first two RNA sequences: {similarity:.4f}\")\n</code></pre>"},{"location":"content/tutorial/RNA-embedding/#encoding-a-single-rna-sequence","title":"Encoding a Single RNA Sequence","text":"<p>You can also encode a single RNA sequence into its embedding. <pre><code># Example single RNA sequence\nsingle_rna_sequence = \"AUGGCUACG\"\n\n# Get the embedding for the single RNA sequence\nsingle_rna_embedding = embedding_model.encode_single_sequence(single_rna_sequence)\n\n# Display the embedding for the single RNA sequence\nprint(\"Single RNA Sequence Embedding:\")\nprint(single_rna_embedding)\n</code></pre></p>"},{"location":"content/tutorial/autobench/","title":"Genomic Foundation Model Auto-Benchmarking","text":"<p>This script is used to auto-benchmark the Genomic Foundation Model on diversified downstream tasks. We have automated the benchmark pipeline based on the OmniGenome package. Once your foundation model is trained, you can use this script to evaluate the performance of the model. The script will automatically load the datasets, preprocess the data, and evaluate the model on the tasks. The script will output the performance of the model on each task.</p>"},{"location":"content/tutorial/autobench/#optional-prepare-your-own-benchmark-datasets","title":"[Optional] Prepare your own benchmark datasets","text":"<p>We have provided a set of benchmark datasets in the tutorials, you can use them to evaluate the performance of the model. If you want to evaluate the model on your own datasets, you can prepare the datasets in the following steps:</p> <ol> <li>Prepare the datasets in the following format:<ul> <li>The datasets should be in the json format.</li> <li>The datasets should contain two columns: sequence and label.</li> <li>The sequence column should contain the DNA sequences.</li> <li>The label column should contain the labels of the sequences.</li> </ul> </li> <li>Save the datasets in a folder like the existing benchmark datasets. This folder is referred to as the root in the script.</li> <li>Place the model and tokenizer in an accessible folder.</li> <li>Sometimes the tokenizer does not work well with the datasets, you can write a custom tokenizer and model wrapper in the omnigenome_wrapper.py file. More detailed documentation on how to write the custom tokenizer and model wrapper will be provided.</li> </ol>"},{"location":"content/tutorial/autobench/#prepare-the-benchmark-environment","title":"Prepare the benchmark environment","text":"<p>Before running the benchmark, you need to install the following required packages in addition to PyTorch and other dependencies. Find the installation instructions for PyTorch at https://pytorch.org/get-started/locally/.</p> <pre><code>pip install omnigenome, findfile, autocuda, metric-visualizer, transformers\n</code></pre>"},{"location":"content/tutorial/autobench/#import-the-required-packages","title":"Import the required packages","text":"<pre><code>from omnigenome import AutoBench\nimport autocuda\n</code></pre>"},{"location":"content/tutorial/autobench/#define-the-root-folder-of-the-benchmark-datasets","title":"Define the root folder of the benchmark datasets","text":"<p>Define the root where the benchmark datasets are stored.</p> <pre><code>root = 'RGB'  # Abbreviation of the RNA genome benchmark\n</code></pre>"},{"location":"content/tutorial/autobench/#define-the-model-and-tokenizer-paths","title":"Define the model and tokenizer paths","text":"<p>Provide the path to the model and tokenizer. <pre><code>model_name_or_path = 'anonymous8/OmniGenome-52M'\n</code></pre></p>"},{"location":"content/tutorial/autobench/#initialize-the-autobench","title":"Initialize the AutoBench","text":"<p>Select the available CUDA device based on your hardware. <pre><code>device = autocuda.auto_cuda()\nauto_bench = AutoBench(\n    benchmark=root,\n    model_name_or_path=model_name_or_path,\n    device=\"cuda\",\n    overwrite=True,\n)\n</code></pre></p>"},{"location":"content/tutorial/autobench/#run-the-benchmark","title":"Run the benchmark","text":"<p>The downstream tasks have predefined configurations for fair comparison. However, sometimes you might need to adjust the configuration based on your dataset or resources. For instance, adjusting the max_length or batch size. To adjust the configuration, you can override parameters in the <code>AutoBenchConfig</code> class. <pre><code>batch_size = 4\nepochs = 1  # increase for real cases\nseeds = [42]\nauto_bench.run(epochs=epochs, batch_size=batch_size, seeds=seeds)\n</code></pre></p>"},{"location":"content/tutorial/autobench/#benchmark-checkpointing","title":"Benchmark Checkpointing","text":"<p>Whenever the benchmark is interrupted, the results will be saved and available for further execution. You can also clear the checkpoint to start fresh: <pre><code>AutoBench(bench_root=root, model_name_or_path=model_name_or_path, device=device, overwrite=True).run()\n</code></pre></p>"},{"location":"content/tutorial/overview/","title":"Overview","text":"<p>Welcome to the OmniGenBench tutorials! This section provides comprehensive guides to help you get started with various RNA analysis and design tasks using OmniGenBench.</p>"},{"location":"content/tutorial/overview/#what-youll-learn","title":"What You'll Learn","text":"<p>Our tutorials cover the essential aspects of RNA computational biology, from basic sequence analysis to advanced design algorithms. Each tutorial is designed to be hands-on and practical, with code examples you can run immediately.</p>"},{"location":"content/tutorial/overview/#available-tutorials","title":"Available Tutorials","text":"<p>We currently have the following tutorials:</p> <ul> <li> <p> RNA Design</p> <p>Learn how to design RNA sequences that fold into specific secondary structures using genetic algorithms.</p> <p>Estimated time: XX-XX minutes</p> </li> <li> <p> RNA Secondary Structure Prediction</p> <p>Predict the secondary structure of RNA sequences using machine learning models.</p> <p>Estimated time: XX-XX minutes</p> </li> <li> <p> RNA Embedding</p> <p>Generate numerical representations (embeddings) of RNA sequences for downstream analysis.</p> <p>Estimated time: XX-XX minutes</p> </li> <li> <p> RNA Augmentation</p> <p>Augment your RNA datasets to help improve model training and analysis robustness.</p> <p>Estimated time: XX-XX minutes</p> </li> </ul>"},{"location":"content/tutorial/overview/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Installation: Make sure you have OmniGenBench installed. See our Installation Guide if you haven't already.</p> </li> <li> <p>Quick Start: If you're new to OmniGenBench, check out our Quick Start Guide first.</p> </li> <li> <p>Choose Your Path: Select the tutorial that best matches your current needs:</p> </li> <li>New to RNA design? Start with RNA Design</li> <li>Need to predict structures? Go to RNA Secondary Structure Prediction</li> <li>Working with sequence analysis? Try RNA Embedding</li> <li>Need more training data? Check out RNA Augmentation</li> </ol>"},{"location":"content/tutorial/overview/#tutorial-structure","title":"Tutorial Structure","text":"<p>Each tutorial follows a consistent structure:</p> <ul> <li>Overview: What you'll accomplish</li> <li>Setup: Required dependencies and model initialization</li> <li>Step-by-step guide: Hands-on coding examples</li> <li>Best practices: Tips for optimal results</li> <li>Next steps: How to extend your learning</li> </ul>"},{"location":"content/tutorial/overview/#need-help","title":"Need Help?","text":"<ul> <li> Check our API Reference for detailed function documentation</li> <li> See our Contributing Guidelines to help improve the tutorials</li> <li> Report issues on our GitHub repository</li> </ul>"},{"location":"content/tutorial/overview/#whats-next","title":"What's Next?","text":"<p>After completing these tutorials, you'll have a solid foundation for using OmniGenBench in your RNA research projects. Consider exploring:</p> <ul> <li>Advanced model fine-tuning techniques</li> <li>Integration with other bioinformatics tools</li> <li>Custom model development</li> <li>Large-scale RNA analysis pipelines</li> </ul> <p>Ready to start? Pick your first tutorial above and dive in!</p>"},{"location":"content/tutorial/rna-design/","title":"RNA Design","text":""},{"location":"content/tutorial/rna-design/#overview","title":"Overview","text":"<p>In this tutorial, we will walk through how to set up and use the <code>OmniGenomeModelforRNADesign</code> class to design RNA sequences. We will cover the following topics:</p> <ol> <li>Setting up the model</li> <li>Running RNA design</li> <li>Saving and loading results</li> <li>Fine-tuning the parameters</li> <li>Visualizing RNA structures</li> </ol>"},{"location":"content/tutorial/rna-design/#setting-up-the-model","title":"Setting up the model","text":""},{"location":"content/tutorial/rna-design/#running-rna-design","title":"Running RNA design","text":"<pre><code># Define the target RNA structure\nstructure = \"(((....)))\"  # Example of a simple RNA hairpin structure\n\n# Run the genetic algorithm to design RNA sequences\nbest_sequences = model.run_rna_design(\n                    structure=structure,\n                    mutation_ratio=0.5,\n                    num_population=100,\n                    num_generation=100\n                    )\n\n# Print the best sequence(s)\nprint(\"Best RNA sequences:\", best_sequences)\n</code></pre> <p>Best RNA sequences: ['GCTGCTGGGC', 'GCTGTGGGGC', 'GCCAGCTGGC', 'GCTCTGGAGC', 'GCTGATGGGC', 'GGTGGCAGCC', 'GCCAAAGGGC', 'GCTGGAGGGC', 'GCCAAAGGGC', 'CGGATTCCCG', 'GCTCTCAAGC', 'GCTGTGGGGC', 'GGGCTTTCCC', 'GCTCAAGGGC', 'GCGCGCGCGC', 'CGCCTCGGCG', 'GCTGAGAGGC', 'GCTGCAGGGC', 'GCTGAAGGGC', 'GGCGAGGGCC', 'GCTAGGAGGC', 'GGGCTTGCCC', 'GGGATGGCCC', 'GCTGCCAAGC', 'GGCGAGGGCC', 'GCTGGCGGGC', 'GCCTTTTGGC', 'GGTGAAGGCC', 'GGCGGCGGCC', 'GCGGCTGCGC', 'GCTGCATGGC', 'GCTGTGGGGC', 'CGCGCGGGCG', 'GGTGCCCGCC', 'TGGAACCCCA', 'GCCCATGGGC', 'CCGAAGCCGG', 'GGGGGGGCCC', 'GCTGCATAGC', 'GCCCTCTGGC', 'GCCGCGGGGC', 'GCTACATGGC', 'GCGGGAGCGC', 'GGTGGCTGCC', 'GCCGTGGGGC', 'GCGCCCCCGC', 'GGTGTCAGCC', 'GGTGTGGGCC', 'GCTCCCGGGC', 'GCTGAGGAGC', 'GCTGCTGGGC', 'GGCCTTCGCC', 'GCGCCCCCGC', 'GCCCTTGGGC', 'GCCGTGGGGC', 'GGCGGCGGCC', 'CGTGCTGACG', 'CCTGAGGAGG', 'GCTACTTGGC', 'TGCGAGGGCA', 'GGCAAAGGCC', 'GCTGAAGAGC', 'CGGCTTGCCG', 'GGGCTTGCCC', 'GCTGAAGAGC', 'GCTGAAGGGC', 'GCCAGTGGGC', 'GGCGCGGGCC', 'GCGGAGGCGC', 'CCTGAGGGGG', 'GCGAAACCGC', 'GCTGAGGGGC', 'GCTTGCAGGC', 'GCTTTCTGGC', 'GGGCTGGCCC', 'GCCATGAGGC', 'GAGGAAGCTC', 'GCTGAAGAGC', 'GCTGCAAGGC', 'CGGGCGGCCG', 'GCCGCGGGGC', 'GCGCGCGCGC', 'CCTGAGGGGG', 'GGGGCTGCCC', 'GCTGAGAGGC', 'GCTAAATGGC', 'GCCGGCAGGC', 'GCCGCTGGGC', 'GCTGGAGGGC', 'GGCGGCGGCC'] In this tutorial, we:</p> <p>Defined the RNA structure Ran the genetic algorithm for RNA design</p>"},{"location":"content/tutorial/rna-design/#saving-and-loading-results","title":"Saving and loading results","text":""},{"location":"content/tutorial/rna-design/#fine-tuning-the-parameters","title":"Fine-tuning the parameters","text":""},{"location":"content/tutorial/rna-design/#visualizing-rna-structures","title":"Visualizing RNA structures","text":""}]}